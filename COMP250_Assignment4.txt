Import java.util.*;

            //Yu-Yueh Liu
            //260688975
            // this can be copy pasted inside HiRiQ class
            // Call my method in main like this: System.out.println(Q.findSolution(D));
            // where Q is a HiRiQ object and D is a Boolean[] 	

            int[][] QQ = { {0, 1, 2}, {3, 4, 5}, {6, 7, 8},{7, 8, 9}, {8, 9, 10}, {9, 10, 11},
                    {10, 11, 12}, {13, 14, 15}, {14, 15, 16},{15, 16, 17}, {16, 17, 18}, {17, 18, 19},
                    {20, 21, 22}, {21, 22, 23},{22, 23, 24},{23, 24, 25}, {24, 25, 26},{27, 28, 29},
                    {30, 31, 32}, {12, 19, 26},{11, 18, 25},{2, 5, 10}, {5, 10, 17},{10, 17, 24},
                    {17, 24, 29}, {24, 29, 32},{1, 4, 9},{4, 9, 16}, {9, 16, 23},{16, 23, 28},
                    {23, 28, 31}, {0, 3, 8},{3, 8, 15},{8, 15, 22}, {15, 22, 27},{22, 27, 30},
                    {7, 14, 21}, {6, 13, 20}};


            class Node<HiRiQ>{
                private HiRiQ current;
                private Node parent;
                private ArrayList<Node<HiRiQ>> children;
                private String Move;
                //private int level;

                public Node(HiRiQ A, String m){
                    this.current = A;
                    this.Move = m;
                    this.children = new ArrayList<Node<HiRiQ>>();
                }

                public void addChild(Node<HiRiQ> child) {
                    child.parent = this;
                    //child.level = this.level+1;
                    this.children.add(child);
                }
            }


            //Call this Method!!!
            public String findSolution(boolean[] input){
                HiRiQ A = new HiRiQ((byte) 0);
                A.store(input);
                return A.solveR();
            }


            //MAIN method that finds solutions
            //Breadth First Search with implicit graph representation
            public String solveR() {
                //declare queues containing node children and arraylists containing all visited nodes
                Queue<Node<HiRiQ>> frontier = new LinkedList<Node<HiRiQ>>();
                Queue<Node<HiRiQ>> Black = new LinkedList<Node<HiRiQ>>();
                ArrayList<Node<HiRiQ>> visited = new ArrayList<Node<HiRiQ>>();
                //
                int count = 0;
                Node<HiRiQ> P = new Node<HiRiQ>(this,null);
                //P.level = 0;
                int n = P.current.weight;
                //Parity Test for first node
                if(!parity(P.current)){
                    System.out.println("FAIL");
                }else {
                    frontier.add(P);
                    if (P.current.IsSolved()) {
                        P.current.print();
                        System.out.println();
                        return "Given configuration is solved";
                    }
                    visited.add(P);

                    //Main BFS
                    while (!(frontier.isEmpty()) || !(Black.isEmpty())) {
                        ArrayList<Node<HiRiQ>> children = new ArrayList<Node<HiRiQ>>();
                        //check in Queue with white substitution
                        if (!(frontier.isEmpty())) {
                            Node<HiRiQ> check = frontier.remove();

                            children = check.current.solve1(check);
                            for (int u = 0; u < children.size(); u++) {
                                if (!(Contain(visited, children.get(u).current))) {
                                    if (children.get(u).current.IsSolved()) {
                                        //children.get(u).current.print();
                                        //System.out.println();
                                        //System.out.println(visited.size());
                                        //System.out.println(frontier.size());
                                        //System.out.println(Black.size());

                                        return findPath(children.get(u));
                                    }
                                    visited.add(children.get(u));
                                    //Parity Test Check
                                    if (parity(children.get(u).current)) {
                                        //children.get(u).current.print();
                                        //System.out.println();
                                        //Add child to Queues
                                        if (children.get(u).current.weight < check.current.weight && frontier.size()<n-1) {
                                            frontier.add(children.get(u));
                                        } else if (children.get(u).current.weight > check.current.weight && Black.size()<n-1) {
                                            Black.add(children.get(u));
                                        }
                                    }

                                }
                            }
			//Check in Queue with black substitution
                        } else if (!(Black.isEmpty())) {
                                Node<HiRiQ> check = Black.remove();

                                children = check.current.solve1(check);
                                for (int u = 0; u < children.size(); u++) {
                                    if (!(Contain(visited, children.get(u).current))) {
                                        if (children.get(u).current.IsSolved()) {
                                            //children.get(u).current.print();
                                            //System.out.println();
                                            //System.out.println(visited.size());
                                            //System.out.println(frontier.size());
                                            //System.out.println(Black.size());

                                            return findPath(children.get(u));
                                        }
                                        visited.add(children.get(u));
                                        //Parity Test Check
                                        if (parity(children.get(u).current)) {
                                            //children.get(u).current.print();
                                            //System.out.println();
                                            
                                            //Add child to Queues
                                            if (children.get(u).current.weight < check.current.weight && frontier.size()<n-1) {
                                                frontier.add(children.get(u));
                                            } else if (children.get(u).current.weight > check.current.weight && Black.size()<n-1) {
                                                Black.add(children.get(u));
                                            }
                                        }

                                    }
                                }
                        }
                    }
                }
                return "No Solution T___T ";
            }



            //Helper method that tracks the parent's move from the solved state
            public String findPath(Node<HiRiQ> A){
                String S = A.Move;
                while(A.parent.Move != null){
                    //System.out.println();
                    S = A.parent.Move + S;
                    A = A.parent;
                    //A.current.print();
                }
                return S;
            }


            //Helper method that tests the parity test
            public boolean parity(HiRiQ A){
                boolean[] test = new boolean[33];
                test = A.load(test);
                //Board 1 (unflipped board)
                int[] Red = {2,4,8,11,14,17,20,23,26,27,32};
                int[] Blue = {0,5,6,9,12,15,18,21,24,28,30};
                int[] Yellow = {1,3,7,10,13,16,19,22,25,29,31};
                //Board 2 (symmetric flipped board)
                int[] Red2 = {0,4,7,10,15,18,20,23,26,29,30};
                int[] Blue2 = {2,3,6,9,12,14,17,22,25,28,32};
                int[] Yellow2 = {1,5,8,11,13,16,19,21,24,27,31};
                //initialize & set counters to 0
                int R = 0 ; int B = 0; int Y = 0;
                int R2 = 0 ; int B2 = 0; int Y2 = 0;
                for(int i : Red){
                    if(test[i]){
                        R++;
                    }
                }
                for(int i : Blue){
                    if(test[i]){
                        B++;
                    }
                }
                for(int i : Yellow){
                    if(test[i]){
                        Y++;
                    }
                }
                for (int i : Red2) {
                    if (test[i]) {
                        R2++;
                    }
                }
                for (int i : Blue2) {
                    if (test[i]) {
                        B2++;
                    }
                }
                for (int i : Yellow2) {
                    if (test[i]) {
                        Y2++;
                    }
                }
                //2 sets of conditions for both boards
                if((B+R)%2 == 0 && (R+Y)%2 == 1 && (B2 + R2)%2 == 0 && (R2 + Y2)%2 == 1) {
                    return true;
                }
                return false;
            }


            //My own method to check if an ArrayList of Node contains a configuration already seen
            public boolean Contain(ArrayList<Node<HiRiQ>> A,HiRiQ B){
                for(int i = 0;i<A.size();i++){
                    if(A.get(i).current.config == B.config && A.get(i).current.weight == B.weight) {
                        return true;
                    }
                }return false;
            }


            //Helper method that finds all possible substitutions
            public boolean[]findSol(HiRiQ H){
                boolean[] G = new boolean[33];
                G = H.load(G);
                boolean[] Z = new boolean[38];
                for(int i = 0; i<38;i++){
                    if(G[QQ[i][0]] == true && G[QQ[i][1]] == true & G[QQ[i][2]] == false ||
                            G[QQ[i][0]] == false && G[QQ[i][1]] == true & G[QQ[i][2]] == true ||
                            (G[QQ[i][0]] == true && G[QQ[i][1]] == false & G[QQ[i][2]] == false ||
                            G[QQ[i][0]] == false && G[QQ[i][1]] == false & G[QQ[i][2]] == true)){
                        //System.out.println(i + " " + "SUB");
                        Z[i] = true;
                    }else{
                        Z[i] = false;
                    }
                }
                return Z;
            }


            //Helper method that uses findSol method and SUB method
            //Finds all children of given Node
            //returns an ArrayList of Node that will be all the children of the input Node
            public ArrayList<Node<HiRiQ>> solve1(Node<HiRiQ> myNode){
                Node<HiRiQ> check = myNode;
                HiRiQ A = check.current;
                boolean[] Sub;
                Sub = A.findSol(A);
                for(int i = 0;
                    i<38;i++) {
                    if (Sub[i]){
                        Node<HiRiQ> newChild = SUB(check,QQ[i][0],QQ[i][1],QQ[i][2]);
                            if((newChild.current.config != A.config) && (newChild.current.weight != A.weight)){
                                check.addChild(newChild);
                        }
                    }
                }
                return check.children;
            }



            //Helper method that MAKE the Substitutions and keep track of the Moves
            //returns a Node containing the transformed HiRiQ
            public Node<HiRiQ> SUB(Node<HiRiQ> E,int b, int c, int d){
                HiRiQ A = E.current;
                boolean[] temp = new boolean[33];
                temp = A.load(temp);
                HiRiQ P = new HiRiQ((byte) 0);
                String S = "";
                Node<HiRiQ> newSub = new Node<HiRiQ>(P,S);

                //I wrote trues and falses because it's clearer to me
                //without that i get confused with my own code
                if(temp[b] == true && temp[c] == true && temp[d] == false) {
                    temp[b] = false;
                    temp[c] = false;
                    temp[d] = true;
                    S = b + "W" + d + " ";

                }else if(temp[b] == false && temp[c] == true && temp[d] == true) {
                    temp[b] = true;
                    temp[c] = false;
                    temp[d] = false;
                    S = d + "W" + b + " ";

                }else if(temp[b] == false && temp[c] == false && temp[d] == true) {
                    temp[b] = true;
                    temp[c] = true;
                    temp[d] = false;
                    S = b + "B" + d + " ";

                }else if(temp[b] == true && temp[c] == false && temp[d] == false){
                    temp[b] = false;
                    temp[c] = true;
                    temp[d] = true;
                    S = d + "B" + b + " ";
                }
                P.store(temp);
                newSub.current = P;
                newSub.Move = S;
                return newSub;
            }
